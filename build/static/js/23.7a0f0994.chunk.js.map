{"version":3,"file":"static/js/23.7a0f0994.chunk.js","mappings":"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","sources":["api/configs/account.js","api/services/accountServices.js","utils/constants.js","utils/utils.js"],"sourcesContent":["export const AccountAPI = {\r\n  getAllAccount: {\r\n    url: `/user/search`,\r\n    method: \"GET\",\r\n    params: {\r\n      size: 1000\r\n    }\r\n  }\r\n};\r\n","import { useQuery } from \"@tanstack/react-query\";\r\nimport httpRequest from \"../../services/httpRequest\";\r\nimport { AccountAPI } from \"../configs/account\";\r\n\r\nconst findAllAccount = async () => {\r\n  try {\r\n    const response = await httpRequest(AccountAPI.getAllAccount);\r\n    return response.userList;\r\n  } catch (err) {\r\n    return err.response.data;\r\n  }\r\n};\r\nexport const withdraw = async (id) => {\r\n  try {\r\n    const response = await httpRequest({\r\n      url: \"/paypal/withdraw\",\r\n      method: \"POST\",\r\n      data: {\r\n        withdrawId: id,\r\n      },\r\n    });\r\n    return response.link;\r\n  } catch (err) {\r\n    return err.response.data;\r\n  }\r\n};\r\nexport const captureOrder = async (id) => {\r\n  try {\r\n    const response = await httpRequest({\r\n      url: \"/paypal/capture-order\",\r\n      method: \"POST\",\r\n      data: {\r\n        withdrawId: id,\r\n      },\r\n    });\r\n    return response;\r\n  } catch (err) {\r\n    return err.response.data;\r\n  }\r\n};\r\nconst findAllRequestWithdraw = async () => {\r\n  try {\r\n    const response = await httpRequest({\r\n      url: \"/paypal/withdraw/all-request\",\r\n      method: \"GET\",\r\n    });\r\n    return response.requestList;\r\n  } catch (err) {\r\n    return err.response.data;\r\n  }\r\n};\r\nexport const useFindAllAccount = () => {\r\n  return useQuery([\"findAllAccount\"], findAllAccount, {\r\n    staleTime: 0,\r\n  });\r\n};\r\nexport const useFindAllRequestWithdraw = () => {\r\n  return useQuery([\"findAllRequestWithdraw\"], findAllRequestWithdraw, {\r\n    staleTime: 0,\r\n  });\r\n};\r\nconst accountServices = {\r\n  findAllAccount,\r\n};\r\nexport default accountServices;\r\n","export const paragraph = \"\";\r\n\r\nexport const TicketStatus = {\r\n  COMPLETED: \"event.completed\",\r\n  SOLDOUT: \"event.sold-out\",\r\n  AVAILABLE: \"event.available\",\r\n};\r\nexport const comparisonStatus = {\r\n  EQUAL: \"equal\",\r\n  MORE: \"more\",\r\n  LESS: \"less\",\r\n  DIFFERENT: \"different\",\r\n};\r\nconst provinceMapping = new Map();\r\nprovinceMapping.set(\"SG\", \"TP. Hồ Chí Minh\");\r\nprovinceMapping.set(\"HN\", \"Hà Nội\");\r\nprovinceMapping.set(\"HP\", \"Hải Phòng\");\r\nprovinceMapping.set(\"DN\", \"Đà Nẵng\");\r\nprovinceMapping.set(\"35\", \"Lâm Đồng\");\r\nprovinceMapping.set(\"13\", \"Quảng Ninh\");\r\nprovinceMapping.set(\"34\", \"Khánh Hòa\");\r\nprovinceMapping.set(\"26\", \"Thừa Thiên Huế\");\r\nprovinceMapping.set(\"33\", \"Đắk Lắk\");\r\nprovinceMapping.set(\"CT\", \"Cần Thơ\");\r\n\r\nconst ROLE = {\r\n  user: \"ROLE_USER\",\r\n  organizer: \"ROLE_ORGANIZER\",\r\n  admin: \"ROLE_ADMIN\",\r\n};\r\nconst PATTERNS = {\r\n  OLD_EMAIL_PATTERN:\r\n    /^[_A-Za-z0-9-+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$/,\r\n  EMAIL_PATTERN:\r\n    /^[a-zA-Z0-9.!#$%&’*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\r\n  DOMAIN_PATTERN:\r\n    /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/,\r\n  IP_PATTERN:\r\n    /^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$/,\r\n  USERNAME_PATTERN: /^[A-Za-z0-9_.-]{6,64}$/,\r\n  PASSWORD_PATTERN: /^.{8,}$/,\r\n  PASSWORD_UPPER: /^(?=.*[A-Z]).{8,}$/,\r\n  PASSWORD_LOWER: /^(?=.*[a-z]).{8,}$/,\r\n  PASSWORD_NUMBER: /^(?=.*\\d).{8,}$/,\r\n  DATE_PATTERN: /^(([01])\\d)\\/(([012])\\d)\\/((19|20)\\d{2})$/,\r\n  DATE_FORMAT: \"DD/MM/YYYY\",\r\n  DATE_TIME_FORMAT: \"DD/MM/YYYY HH:mm:ss\",\r\n  SECTION_PATTERN: /[A-E][1-9]-[1-9]|[A-E][1-9]/g,\r\n  NUMBER_MAX_LENGTH_64: /^[0-9]{,64}$/,\r\n  NUMBER_MAX_LENGTH_128: /^[0-9]{,128}$/,\r\n  NUMBER_MAX_LENGTH_255: /^[0-9]{,255}$/,\r\n  USER_GROUP_NAME: /^[a-zA-Z0-9_ -]*$/,\r\n  BLANK_SPACES: /[^\\s*]/g,\r\n  RE_DIGIT: /^\\d+$/,\r\n};\r\n\r\nconst constants = {\r\n  provinceMapping,\r\n  TicketStatus,\r\n  comparisonStatus,\r\n  PATTERNS,\r\n  ROLE,\r\n};\r\nexport default constants;\r\n","/* eslint-disable array-callback-return */\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport forOwn from \"lodash/forOwn\";\r\nimport isEqual from \"lodash/isEqual\";\r\nimport memoize from \"lodash/memoize\";\r\nimport xorWith from \"lodash/xorWith\";\r\nimport { DateTime, Duration } from \"luxon\";\r\nimport moment from \"moment\";\r\nimport constants from \"./constants\";\r\nconst { comparisonStatus, PATTERNS } = constants;\r\nconst timeFormat = \"HH:mm\";\r\nexport const LOCALE = \"en-US\";\r\nexport const CURRENCY = \"USD\";\r\nexport const TIMEZONE_IANA = \"Asia/Kolkata\";\r\nexport const LUXON_FORMAT = {\r\n  DATE: \"dd/LL/y\",\r\n  TIME: \"hh:mm a\",\r\n  DATE_TIME: \"dd/LL/y hh:mm a\",\r\n  DURATION: \"hh:mm:ss\",\r\n};\r\nexport const REGEX = {\r\n  NUMERIC: {\r\n    STRICT: /^[+-]?[\\d]+[.]?[\\d]*$/gm,\r\n    LOOSE: /^[+-]?[\\d]*[.]?[\\d]*$/gm,\r\n  },\r\n};\r\nexport const FRACTION_LENGTH = 2;\r\n\r\nexport const runInDevelopment = (callback) =>\r\n  [undefined, \"\", \"development\"].includes(process.env.REACT_APP_ENV) &&\r\n  callback();\r\n\r\nexport const logInfo = (...args) =>\r\n  runInDevelopment(() => console.info(...args)); // eslint-disable-line no-console\r\nexport const logWarn = (...args) =>\r\n  runInDevelopment(() => console.warn(...args)); // eslint-disable-line no-console\r\nexport const logError = (...args) =>\r\n  runInDevelopment(() => console.error(...args)); // eslint-disable-line no-console\r\nexport const logTable = (...args) =>\r\n  runInDevelopment(() => console.table(...args)); // eslint-disable-line no-console\r\n\r\nexport const typeOf = (input, type) =>\r\n  input?.constructor?.name === (type ?? null);\r\n\r\nexport const catchError = (func, onError) => {\r\n  const handleError = (error) => {\r\n    logWarn(error);\r\n    return onError?.(error);\r\n  };\r\n  try {\r\n    const output = func?.();\r\n    if (!typeOf(output, \"Promise\")) return output;\r\n    return output?.catch?.(handleError);\r\n  } catch (error) {\r\n    handleError(error);\r\n  }\r\n};\r\n\r\nexport const isArray = (input) => typeOf(input, \"Array\");\r\n\r\nexport const isObject = (input) => typeOf(input, \"Object\");\r\n\r\nexport const isBoolean = (input) => typeOf(input, \"Boolean\");\r\n\r\nexport const isString = (input) => typeOf(input, \"String\");\r\n\r\nexport const isShallowEqual = (obj1, obj2) => {\r\n  const obj1Keys = Object.keys(obj1);\r\n  const obj2Keys = Object.keys(obj2);\r\n\r\n  if (obj1Keys.length !== obj2Keys.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let key of obj1Keys) {\r\n    if (obj1[key] !== obj2[key]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n// check if object contains array\r\n\r\nexport const containsObject = (obj, list) => {\r\n  const isFound = list.some((element) => {\r\n    if (element.id === obj.id) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  });\r\n  isFound();\r\n};\r\n\r\nexport const isNumber = (input) =>\r\n  typeOf(input, \"Number\") && !Number.isNaN(input) && Number.isFinite(input);\r\n\r\nexport const isNumeric = (input, strict = false) =>\r\n  new RegExp(strict ? REGEX.NUMERIC.STRICT : REGEX.NUMERIC.LOOSE).test(input);\r\n\r\nexport const isAlphaNumeric = (input) =>\r\n  new RegExp(REGEX.ALPHA_NUMERIC).test(input);\r\n\r\nexport const isFunction = (input) => typeOf(input, \"Function\");\r\n\r\nexport const callFunction = (func, ...args) =>\r\n  isFunction(func) && func(...args);\r\n\r\nexport const forEach = (instance, callback) =>\r\n  Array.prototype.forEach.call(instance, callback);\r\n\r\nexport const isHTMLElement = (input) => input instanceof HTMLElement;\r\n\r\nexport const isEmpty = (input, options) => {\r\n  options = { isEmpty: [], isNotEmpty: [], ...options };\r\n\r\n  if (options.isEmpty?.includes?.(input)) return true;\r\n  if (options.isNotEmpty?.includes?.(input)) return false;\r\n  if ([undefined, null].includes(input)) return true;\r\n\r\n  if (input?.constructor?.name === \"Array\") return !input.length;\r\n  if (input?.constructor?.name === \"Number\") return Number.isNaN(input);\r\n  if (input?.constructor?.name === \"Object\") return !Object.keys(input).length;\r\n  if (input?.constructor?.name === \"String\") return !input.trim().length;\r\n\r\n  return false;\r\n};\r\n\r\nexport const isNotEmpty = (...args) => !isEmpty(...args);\r\n\r\nexport const pruneEmpty = (obj, options) => {\r\n  const prune = (current) => {\r\n    forOwn(current, (value, key) => {\r\n      if (\r\n        isEmpty(value, options) ||\r\n        ((isObject(value) || isArray(value)) && isEmpty(prune(value), options))\r\n      )\r\n        delete current[key];\r\n    });\r\n    if (isArray(current)) current = current.filter(isNotEmpty);\r\n    return current;\r\n  };\r\n  return prune(cloneDeep(obj));\r\n};\r\n\r\nexport const isArrayEqual = (list1, list2) =>\r\n  isEmpty(xorWith(list1, list2, isEqual));\r\n\r\nexport const returnIfNotEmpty = (value, replaceWith) =>\r\n  isEmpty(value) ? replaceWith : value;\r\n\r\nexport const hasKey = (object, key) =>\r\n  isObject(object) && !isEmpty(object) && Object.keys(object).includes(key);\r\n\r\nexport const withDefaults = (object, defaults) => ({ ...defaults, ...object });\r\n\r\nexport const getCurrentTime = () => DateTime.local().setZone(TIMEZONE_IANA);\r\n\r\nexport const formatDateTime = memoize(\r\n  (isoDate, format = LUXON_FORMAT.DATE_TIME) => {\r\n    const dateTime = DateTime.fromISO(isoDate);\r\n    return dateTime?.isValid ? dateTime.toFormat(format) : undefined;\r\n  },\r\n  (...args) => JSON.stringify(args)\r\n);\r\n\r\nexport const formatDate = (isoDate, format = LUXON_FORMAT.DATE) =>\r\n  formatDateTime(isoDate, format);\r\n\r\nexport const formatTime = (isoDate, format = LUXON_FORMAT.TIME) =>\r\n  formatDateTime(isoDate, format);\r\n\r\nexport const formatDuration = (duration, format = LUXON_FORMAT.DURATION) =>\r\n  Duration.isDuration(duration) && duration?.isValid\r\n    ? duration.toFormat(format)\r\n    : undefined;\r\n\r\nexport const getDateTimeDiff = (startISO, endISO) =>\r\n  DateTime.fromISO(endISO).diff(DateTime.fromISO(startISO));\r\n\r\nexport const getFormattedDateTimeDiff = (\r\n  startISO,\r\n  endISO,\r\n  format = LUXON_FORMAT.DURATION\r\n) => formatDuration(getDateTimeDiff(startISO, endISO), format);\r\n\r\nexport const formatNumber = (input, options = {}) => {\r\n  if (!isNumber(Number(input))) return input;\r\n  const { locale, trimFractions, ...rest } = {\r\n    locale: LOCALE,\r\n    trimFractions: false,\r\n    ...options,\r\n  };\r\n  const fractionLength = trimFractions\r\n    ? rest?.fractionLength\r\n    : `${input}`.split(\".\")?.[1]?.length;\r\n  const defaults = {\r\n    maximumFractionDigits: fractionLength,\r\n    minimumFractionDigits: fractionLength,\r\n  };\r\n  return new Intl.NumberFormat(locale, { ...defaults, ...rest }).format(input);\r\n};\r\n\r\nexport const formatCurrency = (number, options = {}) => {\r\n  const { locale, ...rest } = {\r\n    locale: LOCALE,\r\n    currency: CURRENCY,\r\n    ...options,\r\n  };\r\n  return new Intl.NumberFormat(locale, { style: \"currency\", ...rest }).format(\r\n    number\r\n  );\r\n};\r\n\r\nexport const formatDecimal = (input, fractionLength = FRACTION_LENGTH) =>\r\n  formatNumber(input, { trimFractions: true, fractionLength });\r\n\r\nexport const parseDecimal = (input, fractionLength = FRACTION_LENGTH) =>\r\n  Number(parseFloat(input).toFixed(fractionLength));\r\n\r\nexport const formatFloat = (input, fractionLength = FRACTION_LENGTH) =>\r\n  parseFloat(input).toFixed(fractionLength);\r\n\r\nexport const formatInlineList = (value, options = {}) => {\r\n  if (!isString(value)) return value;\r\n  const { separator, allowAppend } = {\r\n    separator: \",\",\r\n    allowAppend: false,\r\n    ...options,\r\n  };\r\n  const valueList = `${value}`.replace(/[\\s,]+/gm, separator).split(separator);\r\n  return valueList\r\n    .filter(\r\n      (value, index) =>\r\n        !isEmpty(value) ||\r\n        (allowAppend && index && valueList?.length === index + 1)\r\n    )\r\n    .join(separator);\r\n};\r\n\r\nexport const sortEntriesByKey = (desc = false) => {\r\n  const n = { less: desc ? 1 : -1, more: desc ? -1 : 1 };\r\n  return (curr, next) =>\r\n    curr?.[0] < next?.[0] ? n.less : curr?.[0] > next?.[0] ? n.more : 0;\r\n};\r\n\r\nexport const sortArrayByKey = (key = \"id\", desc = false) => {\r\n  if (!isString(key)) return undefined;\r\n  const n = { less: desc ? 1 : -1, more: desc ? -1 : 1 };\r\n  return (curr, next) =>\r\n    curr?.[key] < next?.[key] ? n.less : curr?.[key] > next?.[key] ? n.more : 0;\r\n};\r\n\r\nexport const reduceUnique = (key) => {\r\n  return (a = [], c) => {\r\n    const indexFound = a.findIndex((item) =>\r\n      key === undefined ? item === c : item[key] === c[key]\r\n    );\r\n    if (indexFound === -1) a.push(c);\r\n    return a;\r\n  };\r\n};\r\n\r\nexport const padArray = (list, length, fillWith) => {\r\n  return list.concat(Array(length).fill(fillWith)).slice(0, length);\r\n};\r\n\r\nexport const reduceTotal = (list, key) => {\r\n  if (!isArray(list) || isEmpty(list)) return 0;\r\n  const numList =\r\n    key === undefined\r\n      ? list.map(Number)\r\n      : list.map((item) => Number(item?.[key]));\r\n  return numList.filter(isNumber).reduce((pv, cv) => (pv += cv), 0);\r\n};\r\n\r\nexport const classNames = (list) => list.filter(isString).join(\" \");\r\n\r\nexport const upperFirst = (input, locale = LOCALE) =>\r\n  isString(input)\r\n    ? input.replace(/(^[a-z])/, (match) => match.toLocaleUpperCase(locale))\r\n    : input;\r\n\r\nexport const lowerFirst = (input, locale = LOCALE) =>\r\n  isString(input)\r\n    ? input.replace(/(^[a-z])/, (match) => match.toLocaleLowerCase(locale))\r\n    : input;\r\n\r\nexport const upperCase = (input, locale = LOCALE) =>\r\n  isString(input) ? input.toLocaleUpperCase(locale) : input;\r\n\r\nexport const lowerCase = (input, locale = LOCALE) =>\r\n  isString(input) ? input.toLocaleLowerCase(locale) : input;\r\n\r\nexport const titleCase = (input, locale = LOCALE) =>\r\n  catchError(\r\n    () =>\r\n      isString(input)\r\n        ? input\r\n            .split(/([ :–—-])/)\r\n            .map((current, index, list) => {\r\n              return (\r\n                // Check for small words\r\n                current.search(\r\n                  /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|v.?|vs.?|via)$/i\r\n                ) > -1 &&\r\n                  // Skip first and last word\r\n                  index !== 0 &&\r\n                  index !== list.length - 1 &&\r\n                  // Ignore title end and subtitle start\r\n                  list[index - 3] !== \":\" &&\r\n                  list[index + 1] !== \":\" &&\r\n                  // Ignore small words that start a hyphenated phrase\r\n                  (list[index + 1] !== \"-\" ||\r\n                    (list[index - 1] === \"-\" && list[index + 1] === \"-\"))\r\n                  ? current.toLocaleLowerCase(locale)\r\n                  : current.substr(1).search(/[A-Z]|\\../) > -1 // Ignore intentional capitalization\r\n                  ? current\r\n                  : list[index + 1] === \":\" && list[index + 2] !== \"\" // Ignore URLs\r\n                  ? current\r\n                  : current.replace(/([A-Za-z0-9\\u00C0-\\u00FF])/, (match) =>\r\n                      match.toLocaleUpperCase(locale)\r\n                    ) // Capitalize the first letter\r\n              );\r\n            })\r\n            .join(\"\")\r\n        : input,\r\n    () => \"\"\r\n  );\r\n\r\nexport const objectToQueryString = (object) =>\r\n  catchError(\r\n    () =>\r\n      `?${Object.entries(object)\r\n        .map(\r\n          ([key, value]) =>\r\n            `${key}=${\r\n              !isEmpty(value) && isFunction(value?.toString)\r\n                ? value.toString()\r\n                : \"\"\r\n            }`\r\n        )\r\n        .join(\"&\")}`,\r\n    () => \"\"\r\n  );\r\n\r\nexport const queryStringToObject = (search = window.location.search) =>\r\n  catchError(\r\n    () => {\r\n      const urlParams = new URLSearchParams(search);\r\n      return Object.fromEntries(urlParams.entries());\r\n    },\r\n    () => {}\r\n  );\r\n/**\r\n * @param {Array} data - An array of objects of data.\r\n * @param {string} key - Key of object in the array. Key's value has date format (DD/MM/YYYY).\r\n * @param {string} type - Type of order. Default is ascending. There are 2 types: descending, ascending.\r\n */\r\nexport const orderByDate = (data, key, type = \"asc\") => {\r\n  data.sort((a, b) => {\r\n    a = moment(a[key], PATTERNS.DATE_FORMAT);\r\n    b = moment(b[key], PATTERNS.DATE_FORMAT);\r\n    if (a > b) return -1;\r\n    if (a < b) return 1;\r\n  });\r\n  if (type === \"desc\") {\r\n    return data;\r\n  } else {\r\n    return data.reverse();\r\n  }\r\n};\r\nexport const filterByDate = (type, list, customDate) => {\r\n  const dateFormat = PATTERNS.DATE_FORMAT;\r\n  const startOfWeek = moment().startOf(\"week\");\r\n  const endOfWeek = moment().endOf(\"week\");\r\n  const tomorrow = moment().add(1, \"days\");\r\n  const startOfMonth = moment().startOf(\"month\");\r\n  const endOfMonth = moment().endOf(\"month\");\r\n  if (list && type === \"tomorrow\")\r\n    return list.filter(\r\n      (event) => moment(event.startingDate, dateFormat) === tomorrow\r\n    );\r\n  if (list && type === \"this-week\")\r\n    return list.filter(\r\n      (event) =>\r\n        moment(event.startingDate, dateFormat) >= startOfWeek &&\r\n        moment(event.startingDate, dateFormat) <= endOfWeek\r\n    );\r\n  if (list && type === \"this-month\")\r\n    return list.filter(\r\n      (event) =>\r\n        moment(event.startingDate, dateFormat) >= startOfMonth &&\r\n        moment(event.startingDate, dateFormat) <= endOfMonth\r\n    );\r\n  if (list && type === \"date-range\") {\r\n    const start = moment(customDate.start, dateFormat);\r\n    const end = moment(customDate.end, dateFormat);\r\n    if (start && end) {\r\n      return list.filter(\r\n        (event) =>\r\n          moment(event.startingDate, dateFormat) >= start &&\r\n          moment(event.endingDate, dateFormat) <= end\r\n      );\r\n    }\r\n  }\r\n\r\n  return list;\r\n};\r\nexport const checkImageURL = (url) => {\r\n  return url.match(/\\.(jpeg|jpg|gif|png)$/) != null;\r\n};\r\nexport const displayDate = (date) => {\r\n  return moment(date, PATTERNS.DATE_FORMAT).format(\"dddd, DD MMMM, YYYY\");\r\n};\r\n/**\r\n * Display time in format HH:MM\r\n * @param {string} time -\r\n */\r\nexport const displayTime = (time) => {\r\n  return moment(time, timeFormat).format(\"LT\");\r\n};\r\nexport const toSlug = (str) => {\r\n  // Chuyển hết sang chữ thường\r\n  str = str.toLowerCase();\r\n\r\n  // xóa dấu\r\n  str = str\r\n    .normalize(\"NFD\") // chuyển chuỗi sang unicode tổ hợp\r\n    .replace(/[\\u0300-\\u036f]/g, \"\"); // xóa các ký tự dấu sau khi tách tổ hợp\r\n\r\n  // Thay ký tự đĐ\r\n  str = str.replace(/[đĐ]/g, \"d\");\r\n\r\n  // Xóa ký tự đặc biệt\r\n  str = str.replace(/([^0-9a-z-\\s])/g, \"\");\r\n\r\n  // Xóa khoảng trắng thay bằng ký tự -\r\n  str = str.replace(/(\\s+)/g, \"-\");\r\n\r\n  // Xóa ký tự - liên tiếp\r\n  str = str.replace(/-+/g, \"-\");\r\n\r\n  // xóa phần dư - ở đầu & cuối\r\n  str = str.replace(/^-+|-+$/g, \"\");\r\n\r\n  // return\r\n  return str;\r\n};\r\nexport const debounce = (callback, delay = 200) => {\r\n  let timeId;\r\n  return (...args) => {\r\n    clearTimeout(timeId);\r\n    timeId = setTimeout(() => callback(...args), delay);\r\n  };\r\n};\r\n//* FILTER AN ARRAY OF OBJECTS WITH MULTIPLE CHAINED CONDITIONS.\r\nexport function evaluate(expr) {\r\n  switch (expr?.type) {\r\n    case \"filter\":\r\n      return (v) => evaluateFilter(v, expr);\r\n    case \"and\":\r\n      return (v) => expr.filters.every((e) => evaluate(e)(v));\r\n    case \"or\":\r\n      return (v) => expr.filters.some((e) => evaluate(e)(v));\r\n    //case ...:\r\n    //  implement any other filters you wish to support\r\n    default:\r\n      throw Error(`unsupported filter expression: ${JSON.stringify(expr)}`);\r\n  }\r\n}\r\nfunction evaluateFilter(t, { key, condition, value }) {\r\n  switch (condition) {\r\n    case comparisonStatus.EQUAL:\r\n      return t?.[key] === value;\r\n    case comparisonStatus.MORE:\r\n      return t?.[key] > value;\r\n    case comparisonStatus.LESS:\r\n      return t?.[key] < value;\r\n    case comparisonStatus.DIFFERENT:\r\n      return t?.[key] !== value;\r\n    //case ...:\r\n    //  implement other supported conditions here\r\n    default:\r\n      throw Error(`Unsupported filter condition: ${condition}`);\r\n  }\r\n}\r\nexport function Base64() {\r\n  var BASE64 = {\r\n    encode: function (str) {\r\n      let Base64 = require(\"js-base64\").Base64;\r\n      return Base64.encode(str);\r\n    },\r\n    decode: function (str) {\r\n      let Base64 = require(\"js-base64\").Base64;\r\n      return Base64.decode(str);\r\n    },\r\n  };\r\n  return BASE64;\r\n}\r\nexport const convertMongodbTimeToString = (date) => {\r\n  let dateStr = moment(date);\r\n  return moment(dateStr).format(\"DD/MM/YYYY HH:mm\");\r\n};\r\nexport function filterData(dateType, dateRange, list) {\r\n  return list && dateType === \"date-range\"\r\n    ? filterByDate(dateType, list, {\r\n        start: dateRange.start,\r\n        end: dateRange.end,\r\n        isAvailable: dateRange.isAvailable,\r\n      })\r\n    : filterByDate(dateType, list);\r\n}\r\n/**\r\n * Convert number to currency format\r\n */\r\nexport const formatter = new Intl.NumberFormat(\"vi-VN\", {\r\n  style: \"currency\",\r\n  currency: \"VND\",\r\n});\r\nexport function convertToYearMonthDayFormat(dateString) {\r\n  const [day, month, year] = dateString.split(\"/\");\r\n  return `${year}-${month}-${day}`;\r\n}\r\nexport const Sorter = {\r\n  sort(param1, param2) {\r\n    if (typeof param1 == \"string\" && typeof param2 == \"string\") {\r\n      return param1.localeCompare(param2);\r\n    }\r\n    if (typeof param1 == \"number\" && typeof param2 == \"string\") {\r\n      return -1;\r\n    }\r\n    if (typeof param1 == \"string\" && typeof param2 == \"number\") {\r\n      return 1;\r\n    }\r\n    if (typeof param1 == \"number\" && typeof param2 == \"number\") {\r\n      return param1 - param2;\r\n    }\r\n  },\r\n};\r\n"],"names":["AccountAPI","url","method","params","size","findAllAccount","httpRequest","response","userList","data","withdraw","id","withdrawId","link","findAllRequestWithdraw","requestList","useFindAllAccount","useQuery","staleTime","useFindAllRequestWithdraw","provinceMapping","Map","set","constants","TicketStatus","COMPLETED","SOLDOUT","AVAILABLE","comparisonStatus","EQUAL","MORE","LESS","DIFFERENT","PATTERNS","OLD_EMAIL_PATTERN","EMAIL_PATTERN","DOMAIN_PATTERN","IP_PATTERN","USERNAME_PATTERN","PASSWORD_PATTERN","PASSWORD_UPPER","PASSWORD_LOWER","PASSWORD_NUMBER","DATE_PATTERN","DATE_FORMAT","DATE_TIME_FORMAT","SECTION_PATTERN","NUMBER_MAX_LENGTH_64","NUMBER_MAX_LENGTH_128","NUMBER_MAX_LENGTH_255","USER_GROUP_NAME","BLANK_SPACES","RE_DIGIT","ROLE","user","organizer","admin","LUXON_FORMAT","isEmpty","input","options","isNotEmpty","includes","undefined","constructor","name","length","Number","isNaN","Object","keys","trim","memoize","isoDate","format","dateTime","DateTime","isValid","toFormat","args","JSON","stringify","convertMongodbTimeToString","date","dateStr","moment","Intl","NumberFormat","style","currency","Sorter","sort","param1","param2","localeCompare"],"sourceRoot":""}